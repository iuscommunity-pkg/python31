--- Tools/scripts/pathfix.py.fix-pathfix	2007-06-13 14:07:49.000000000 -0400
+++ Tools/scripts/pathfix.py	2009-09-29 15:36:51.000000000 -0400
@@ -1,4 +1,4 @@
-#! /usr/bin/env python
+#! /usr/bin/python3.1
 
 # Change the #! line occurring in Python scripts.  The new interpreter
 # pathname must be given with a -i option.
@@ -61,7 +61,7 @@ def main():
 
 ispythonprog = re.compile('^[a-zA-Z0-9_]+\.py$')
 def ispython(name):
-    return ispythonprog.match(name) >= 0
+    return ispythonprog.match(name)
 
 def recursedown(dirname):
     dbg('recursedown(%r)\n' % (dirname,))
@@ -85,10 +85,31 @@ def recursedown(dirname):
         if recursedown(fullname): bad = 1
     return bad
 
+# Parse PEP-263 headers looking for encoding informtion:
+decl_re = re.compile(r"coding[=:]\s*([-\w.]+)")
+def get_encoding(filename):
+    with open(filename, 'rb') as f:
+        for line in f.readlines()[0:2]:
+            match = decl_re.search(line.decode('utf-8'))
+            if match:
+                encoding = match.group(1)
+                # FIXME: some Demo/tix files have encoding "iso-latin-1-unix"
+                # should this work???
+                if encoding == 'iso-latin-1-unix':
+                    encoding = 'iso-8859-1'
+                return encoding
+    # Default to UTF-8 (c.f. PEP-3120):
+    return 'utf-8'
+
 def fix(filename):
-##  dbg('fix(%r)\n' % (filename,))
+    dbg('fix(%r)\n' % (filename,))
+    # Skip deliberately-broken files:
+    if filename.startswith('./Lib/test/bad'):
+        return
+    encoding = get_encoding(filename)
+    dbg('encoding:%s\n' % ( encoding,))
     try:
-        f = open(filename, 'r')
+        f = open(filename, 'r', encoding=encoding)
     except IOError as msg:
         err('%s: cannot open: %r\n' % (filename, msg))
         return 1
@@ -101,7 +122,7 @@ def fix(filename):
     head, tail = os.path.split(filename)
     tempname = os.path.join(head, '@' + tail)
     try:
-        g = open(tempname, 'w')
+        g = open(tempname, 'w', encoding=encoding)
     except IOError as msg:
         f.close()
         err('%s: cannot create: %r\n' % (tempname, msg))
